import React, { useState } from 'react';
import { BookOpen, Target, TrendingUp, Award, RefreshCw, ChevronRight, Star, Brain } from 'lucide-react';

const DNBFrancaisApp = () => {
  const [currentView, setCurrentView] = useState('menu');
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [quizResults, setQuizResults] = useState([]);
  const [playerStats, setPlayerStats] = useState({
    totalQuizzes: 0,
    totalQuestions: 0,
    correctAnswers: 0,
    weaknesses: {},
    strengths: []
  });

  const themes = [
    { id: 'grammaire', name: 'Grammaire', icon: 'üìù', color: 'bg-blue-500' },
    { id: 'orthographe', name: 'Orthographe', icon: '‚úçÔ∏è', color: 'bg-green-500' },
    { id: 'vocabulaire', name: 'Vocabulaire', icon: 'üìö', color: 'bg-purple-500' },
    { id: 'conjugaison', name: 'Conjugaison', icon: '‚ö°', color: 'bg-orange-500' },
    { id: 'litterature', name: 'Litt√©rature', icon: 'üìñ', color: 'bg-red-500' },
    { id: 'expression', name: 'Expression √©crite', icon: '‚úíÔ∏è', color: 'bg-indigo-500' },
    { id: 'comprehension', name: 'Compr√©hension', icon: 'üß†', color: 'bg-teal-500' },
    { id: 'figures', name: 'Figures de style', icon: 'üé≠', color: 'bg-pink-500' }
  ];

  const questionBanks = {
    grammaire: [
      {
        question: "Quelle est la fonction du groupe soulign√© : 'Le chat de ma voisine' dort sur le toit ?",
        options: ["COD", "COI", "Sujet", "Compl√©ment du nom"],
        correct: 2,
        explanation: "Le groupe 'Le chat de ma voisine' effectue l'action de dormir, c'est donc le sujet."
      },
      {
        question: "Dans 'Il mange une pomme', quel est le COD ?",
        options: ["Il", "mange", "une pomme", "Il n'y en a pas"],
        correct: 2,
        explanation: "'Une pomme' r√©pond √† la question 'Il mange quoi ?', c'est le COD."
      },
      {
        question: "Quelle est la nature de 'rapidement' dans 'Il court rapidement' ?",
        options: ["Adjectif", "Adverbe", "Nom", "Verbe"],
        correct: 1,
        explanation: "'Rapidement' modifie le verbe 'court', c'est un adverbe de mani√®re."
      }
    ],
    orthographe: [
      {
        question: "Comment √©crit-on : 'Elles se sont ... lav√©es' ?",
        options: ["lav√©", "lav√©e", "lav√©s", "lav√©es"],
        correct: 3,
        explanation: "Le participe pass√© s'accorde avec le sujet 'elles' (f√©minin pluriel)."
      },
      {
        question: "Quelle est la bonne orthographe ?",
        options: ["Chateau", "Ch√¢teau", "Chatteau", "Chateaux"],
        correct: 1,
        explanation: "Le mot ch√¢teau prend un accent circonflexe sur le √¢."
      }
    ],
    vocabulaire: [
      {
        question: "Quel est le sens du pr√©fixe 'anti-' ?",
        options: ["Avec", "Contre", "Avant", "Apr√®s"],
        correct: 1,
        explanation: "Le pr√©fixe 'anti-' signifie 'contre' (antibiotique, antigel)."
      },
      {
        question: "Quel est le synonyme de 'perspicace' ?",
        options: ["Na√Øf", "Clairvoyant", "Confus", "H√©sitant"],
        correct: 1,
        explanation: "'Perspicace' signifie qui comprend vite, qui est clairvoyant."
      }
    ],
    conjugaison: [
      {
        question: "Conjuguez 'prendre' √† la 1re personne du pluriel du pass√© simple :",
        options: ["Nous prenions", "Nous pr√Æmes", "Nous avons pris", "Nous prendrions"],
        correct: 1,
        explanation: "Au pass√© simple : nous pr√Æmes (avec √Æ et terminaison -mes)."
      }
    ],
    litterature: [
      {
        question: "Qui a √©crit 'Les Mis√©rables' ?",
        options: ["√âmile Zola", "Victor Hugo", "Gustave Flaubert", "Honor√© de Balzac"],
        correct: 1,
        explanation: "'Les Mis√©rables' est un roman de Victor Hugo publi√© en 1862."
      }
    ],
    expression: [
      {
        question: "Dans un r√©cit, quel temps utilise-t-on pour les actions de premier plan ?",
        options: ["Imparfait", "Pass√© simple", "Pr√©sent", "Plus-que-parfait"],
        correct: 1,
        explanation: "Le pass√© simple exprime les actions principales dans un r√©cit au pass√©."
      }
    ],
    comprehension: [
      {
        question: "Qu'est-ce qu'une ellipse narrative ?",
        options: ["Une r√©p√©tition", "Un saut dans le temps", "Une comparaison", "Un dialogue"],
        correct: 1,
        explanation: "L'ellipse narrative consiste √† passer sous silence une p√©riode de temps."
      }
    ],
    figures: [
      {
        question: "Identifiez la figure de style : 'Ses yeux sont des √©toiles'",
        options: ["Comparaison", "M√©taphore", "Personnification", "Hyperbole"],
        correct: 1,
        explanation: "C'est une m√©taphore : comparaison implicite sans outil de comparaison."
      }
    ]
  };

  const startQuiz = (specificTheme = null) => {
    const availableThemes = Object.keys(questionBanks);
    const selectedTheme = specificTheme || availableThemes[Math.floor(Math.random() * availableThemes.length)];
    const questions = questionBanks[selectedTheme];
    
    setCurrentQuiz({
      theme: selectedTheme,
      questions: [...questions].sort(() => Math.random() - 0.5).slice(0, Math.min(5, questions.length))
    });
    setCurrentQuestionIndex(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setQuizResults([]);
    setCurrentView('quiz');
  };

  const handleAnswerSelect = (answerIndex) => {
    setSelectedAnswer(answerIndex);
  };

  const handleNextQuestion = () => {
    const isCorrect = selectedAnswer === currentQuiz.questions[currentQuestionIndex].correct;
    const newResult = {
      question: currentQuiz.questions[currentQuestionIndex].question,
      correct: isCorrect,
      theme: currentQuiz.theme
    };

    const newResults = [...quizResults, newResult];
    setQuizResults(newResults);
    
    if (isCorrect) {
      setScore(score + 1);
    }

    if (currentQuestionIndex < currentQuiz.questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedAnswer(null);
      setShowResult(false);
    } else {
      finishQuiz(newResults);
    }
  };

  const finishQuiz = (finalResults) => {
    const correctAnswers = finalResults.filter(r => r.correct).length;
    
    setPlayerStats({
      totalQuizzes: playerStats.totalQuizzes + 1,
      totalQuestions: playerStats.totalQuestions + finalResults.length,
      correctAnswers: playerStats.correctAnswers + correctAnswers,
      weaknesses: playerStats.weaknesses,
      strengths: playerStats.strengths
    });

    setCurrentView('results');
  };

  const showAnswer = () => {
    setShowResult(true);
  };

  if (currentView === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-800">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center mb-12">
            <h1 className="text-5xl font-bold text-white mb-4">
              üéì DNB Fran√ßais
            </h1>
            <p className="text-xl text-purple-100">Pr√©pare-toi pour le Dipl√¥me National du Brevet !</p>
          </div>

          <div className="grid md:grid-cols-2 gap-8 mb-12">
            <div className="bg-white rounded-2xl p-8 shadow-2xl">
              <div className="flex items-center mb-6">
                <Target className="w-8 h-8 text-blue-600 mr-3" />
                <h2 className="text-2xl font-bold text-gray-800">Quiz Adaptatif</h2>
              </div>
              <p className="text-gray-600 mb-6">
                Lance un quiz personnalis√© qui s'adapte √† tes points faibles !
              </p>
              <button
                onClick={() => startQuiz()}
                className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-4 rounded-xl font-bold text-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105"
              >
                Commencer un Quiz üöÄ
              </button>
            </div>

            <div className="bg-white rounded-2xl p-8 shadow-2xl">
              <div className="flex items-center mb-6">
                <TrendingUp className="w-8 h-8 text-green-600 mr-3" />
                <h2 className="text-2xl font-bold text-gray-800">Tes Statistiques</h2>
              </div>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-gray-600">Quiz compl√©t√©s:</span>
                  <span className="font-bold text-blue-600">{playerStats.totalQuizzes}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Questions r√©pondues:</span>
                  <span className="font-bold text-purple-600">{playerStats.totalQuestions}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Taux de r√©ussite:</span>
                  <span className="font-bold text-green-600">
                    {playerStats.totalQuestions > 0 ? Math.round((playerStats.correctAnswers / playerStats.totalQuestions) * 100) : 0}%
                  </span>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl p-8 shadow-2xl">
            <div className="flex items-center mb-6">
              <BookOpen className="w-8 h-8 text-indigo-600 mr-3" />
              <h2 className="text-2xl font-bold text-gray-800">Choisir un Th√®me</h2>
            </div>
            <div className="grid md:grid-cols-4 sm:grid-cols-2 gap-4">
              {themes.map((theme) => (
                <button
                  key={theme.id}
                  onClick={() => startQuiz(theme.id)}
                  className={`${theme.color} text-white p-6 rounded-xl hover:opacity-90 transition-all duration-300 transform hover:scale-105 shadow-lg`}
                >
                  <div className="text-3xl mb-2">{theme.icon}</div>
                  <div className="font-bold text-sm">{theme.name}</div>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'quiz') {
    const currentQuestion = currentQuiz.questions[currentQuestionIndex];
    const currentTheme = themes.find(t => t.id === currentQuiz.theme);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-800">
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl p-8 shadow-2xl">
              <div className="flex justify-between items-center mb-8">
                <div className="flex items-center">
                  <div className={`w-12 h-12 rounded-full ${currentTheme.color} flex items-center justify-center text-white text-xl mr-4`}>
                    {currentTheme.icon}
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-gray-800">{currentTheme.name}</h2>
                    <p className="text-gray-600">Question {currentQuestionIndex + 1} sur {currentQuiz.questions.length}</p>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-green-600">
                    Score: {score}/{currentQuestionIndex + (showResult ? 1 : 0)}
                  </div>
                </div>
              </div>

              <div className="mb-8">
                <h3 className="text-xl font-bold text-gray-800 mb-6">{currentQuestion.question}</h3>

                <div className="space-y-3">
                  {currentQuestion.options.map((option, index) => (
                    <button
                      key={index}
                      onClick={() => handleAnswerSelect(index)}
                      disabled={showResult}
                      className={`w-full p-4 rounded-xl text-left transition-all duration-300 ${
                        selectedAnswer === index
                          ? showResult
                            ? index === currentQuestion.correct
                              ? 'bg-green-100 border-2 border-green-500 text-green-800'
                              : 'bg-red-100 border-2 border-red-500 text-red-800'
                            : 'bg-blue-100 border-2 border-blue-500 text-blue-800'
                          : showResult && index === currentQuestion.correct
                            ? 'bg-green-100 border-2 border-green-500 text-green-800'
                            : 'bg-gray-50 border-2 border-gray-200 hover:bg-gray-100'
                      }`}
                    >
                      <div className="flex items-center">
                        <span className="w-8 h-8 bg-white rounded-full flex items-center justify-center mr-3 text-sm font-bold">
                          {String.fromCharCode(65 + index)}
                        </span>
                        <span>{option}</span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>

              {showResult && (
                <div className="mb-6 p-6 bg-blue-50 rounded-xl border-l-4 border-blue-500">
                  <h4 className="font-bold text-blue-800 mb-2">Explication :</h4>
                  <p className="text-blue-700">{currentQuestion.explanation}</p>
                </div>
              )}

              <div className="flex justify-between">
                <button
                  onClick={() => setCurrentView('menu')}
                  className="px-6 py-3 bg-gray-500 text-white rounded-xl hover:bg-gray-600 transition-colors"
                >
                  Retour au menu
                </button>
                
                {!showResult ? (
                  <button
                    onClick={showAnswer}
                    disabled={selectedAnswer === null}
                    className="px-6 py-3 bg-orange-500 text-white rounded-xl hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    Voir la r√©ponse
                  </button>
                ) : (
                  <button
                    onClick={handleNextQuestion}
                    className="px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors flex items-center"
                  >
                    {currentQuestionIndex < currentQuiz.questions.length - 1 ? 'Question suivante' : 'Terminer le quiz'}
                    <ChevronRight className="w-5 h-5 ml-2" />
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'results') {
    const percentage = Math.round((score / currentQuiz.questions.length) * 100);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-600 via-blue-600 to-purple-800">
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl p-8 shadow-2xl text-center">
              <div className="mb-8">
                <Award className="w-16 h-16 text-yellow-500 mx-auto mb-4" />
                <h1 className="text-4xl font-bold text-gray-800 mb-2">Quiz Termin√© !</h1>
                <p className="text-xl text-gray-600">
                  Tu as obtenu {score} sur {currentQuiz.questions.length}
                </p>
              </div>

              <div className="mb-8">
                <div className="w-32 h-32 mx-auto mb-4 relative">
                  <div className="w-32 h-32 rounded-full border-8 border-gray-200 flex items-center justify-center">
                    <span className="text-3xl font-bold text-gray-800">{percentage}%</span>
                  </div>
                </div>
                
                <div className="flex justify-center mb-6">
                  {percentage >= 80 ? (
                    <div className="flex items-center text-green-600">
                      <Star className="w-6 h-6 mr-2" />
                      <span className="text-lg font-bold">Excellent travail !</span>
                    </div>
                  ) : percentage >= 60 ? (
                    <div className="flex items-center text-orange-500">
                      <TrendingUp className="w-6 h-6 mr-2" />
                      <span className="text-lg font-bold">Bon effort !</span>
                    </div>
                  ) : (
                    <div className="flex items-center text-blue-500">
                      <RefreshCw className="w-6 h-6 mr-2" />
                      <span className="text-lg font-bold">Continue √† t'entra√Æner !</span>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => startQuiz()}
                  className="px-8 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors flex items-center"
                >
                  <RefreshCw className="w-5 h-5 mr-2" />
                  Nouveau Quiz
                </button>
                <button
                  onClick={() => setCurrentView('menu')}
                  className="px-8 py-3 bg-gray-500 text-white rounded-xl hover:bg-gray-600 transition-colors"
                >
                  Retour au menu
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return null;
};

export default DNBFrancaisApp;